// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/user.proto

package srv_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*GetUserResponse, error)
	VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...client.CallOption) (*VerifyUserResponse, error)
	GetUserPage(ctx context.Context, in *GetUserPageRequest, opts ...client.CallOption) (*GetUserPageResponse, error)
	StoreUser(ctx context.Context, in *StoreUserRequest, opts ...client.CallOption) (*StoreUserResponse, error)
	BatchBanUser(ctx context.Context, in *BatchBanUserRequest, opts ...client.CallOption) (*BatchBanUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error)
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...client.CallOption) (*GetUserListResponse, error)
	BindAdmin(ctx context.Context, in *BindAdminRequest, opts ...client.CallOption) (*BindAdminResponse, error)
	GetAdminUserList(ctx context.Context, in *GetAdminUserListRequest, opts ...client.CallOption) (*GetAdminUserListResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*ResetPasswordResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserInfo", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...client.CallOption) (*VerifyUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.VerifyUser", in)
	out := new(VerifyUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserPage(ctx context.Context, in *GetUserPageRequest, opts ...client.CallOption) (*GetUserPageResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserPage", in)
	out := new(GetUserPageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) StoreUser(ctx context.Context, in *StoreUserRequest, opts ...client.CallOption) (*StoreUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.StoreUser", in)
	out := new(StoreUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) BatchBanUser(ctx context.Context, in *BatchBanUserRequest, opts ...client.CallOption) (*BatchBanUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.BatchBanUser", in)
	out := new(BatchBanUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUser", in)
	out := new(UpdateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...client.CallOption) (*GetUserListResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserList", in)
	out := new(GetUserListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) BindAdmin(ctx context.Context, in *BindAdminRequest, opts ...client.CallOption) (*BindAdminResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.BindAdmin", in)
	out := new(BindAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetAdminUserList(ctx context.Context, in *GetAdminUserListRequest, opts ...client.CallOption) (*GetAdminUserListResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetAdminUserList", in)
	out := new(GetAdminUserListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*ResetPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ResetPassword", in)
	out := new(ResetPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	GetUserInfo(context.Context, *GetUserInfoRequest, *GetUserResponse) error
	VerifyUser(context.Context, *VerifyUserRequest, *VerifyUserResponse) error
	GetUserPage(context.Context, *GetUserPageRequest, *GetUserPageResponse) error
	StoreUser(context.Context, *StoreUserRequest, *StoreUserResponse) error
	BatchBanUser(context.Context, *BatchBanUserRequest, *BatchBanUserResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *UpdateUserResponse) error
	GetUserList(context.Context, *GetUserListRequest, *GetUserListResponse) error
	BindAdmin(context.Context, *BindAdminRequest, *BindAdminResponse) error
	GetAdminUserList(context.Context, *GetAdminUserListRequest, *GetAdminUserListResponse) error
	ResetPassword(context.Context, *ResetPasswordRequest, *ResetPasswordResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		GetUserInfo(ctx context.Context, in *GetUserInfoRequest, out *GetUserResponse) error
		VerifyUser(ctx context.Context, in *VerifyUserRequest, out *VerifyUserResponse) error
		GetUserPage(ctx context.Context, in *GetUserPageRequest, out *GetUserPageResponse) error
		StoreUser(ctx context.Context, in *StoreUserRequest, out *StoreUserResponse) error
		BatchBanUser(ctx context.Context, in *BatchBanUserRequest, out *BatchBanUserResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error
		GetUserList(ctx context.Context, in *GetUserListRequest, out *GetUserListResponse) error
		BindAdmin(ctx context.Context, in *BindAdminRequest, out *BindAdminResponse) error
		GetAdminUserList(ctx context.Context, in *GetAdminUserListRequest, out *GetAdminUserListResponse) error
		ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *ResetPasswordResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, out *GetUserResponse) error {
	return h.UserServiceHandler.GetUserInfo(ctx, in, out)
}

func (h *userServiceHandler) VerifyUser(ctx context.Context, in *VerifyUserRequest, out *VerifyUserResponse) error {
	return h.UserServiceHandler.VerifyUser(ctx, in, out)
}

func (h *userServiceHandler) GetUserPage(ctx context.Context, in *GetUserPageRequest, out *GetUserPageResponse) error {
	return h.UserServiceHandler.GetUserPage(ctx, in, out)
}

func (h *userServiceHandler) StoreUser(ctx context.Context, in *StoreUserRequest, out *StoreUserResponse) error {
	return h.UserServiceHandler.StoreUser(ctx, in, out)
}

func (h *userServiceHandler) BatchBanUser(ctx context.Context, in *BatchBanUserRequest, out *BatchBanUserResponse) error {
	return h.UserServiceHandler.BatchBanUser(ctx, in, out)
}

func (h *userServiceHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error {
	return h.UserServiceHandler.UpdateUser(ctx, in, out)
}

func (h *userServiceHandler) GetUserList(ctx context.Context, in *GetUserListRequest, out *GetUserListResponse) error {
	return h.UserServiceHandler.GetUserList(ctx, in, out)
}

func (h *userServiceHandler) BindAdmin(ctx context.Context, in *BindAdminRequest, out *BindAdminResponse) error {
	return h.UserServiceHandler.BindAdmin(ctx, in, out)
}

func (h *userServiceHandler) GetAdminUserList(ctx context.Context, in *GetAdminUserListRequest, out *GetAdminUserListResponse) error {
	return h.UserServiceHandler.GetAdminUserList(ctx, in, out)
}

func (h *userServiceHandler) ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *ResetPasswordResponse) error {
	return h.UserServiceHandler.ResetPassword(ctx, in, out)
}

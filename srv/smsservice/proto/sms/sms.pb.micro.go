// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/sms/sms.proto

package srv_sms

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SmsService service

func NewSmsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SmsService service

type SmsService interface {
	GetLoginVerifyCode(ctx context.Context, in *GetLoginVerifyCodeRequest, opts ...client.CallOption) (*GetLoginVerifyCodeResponse, error)
	GetForgetPasswordCode(ctx context.Context, in *GetForgetPasswordCodeRequest, opts ...client.CallOption) (*GetForgetPasswordCodeResponse, error)
}

type smsService struct {
	c    client.Client
	name string
}

func NewSmsService(name string, c client.Client) SmsService {
	return &smsService{
		c:    c,
		name: name,
	}
}

func (c *smsService) GetLoginVerifyCode(ctx context.Context, in *GetLoginVerifyCodeRequest, opts ...client.CallOption) (*GetLoginVerifyCodeResponse, error) {
	req := c.c.NewRequest(c.name, "SmsService.GetLoginVerifyCode", in)
	out := new(GetLoginVerifyCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) GetForgetPasswordCode(ctx context.Context, in *GetForgetPasswordCodeRequest, opts ...client.CallOption) (*GetForgetPasswordCodeResponse, error) {
	req := c.c.NewRequest(c.name, "SmsService.GetForgetPasswordCode", in)
	out := new(GetForgetPasswordCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SmsService service

type SmsServiceHandler interface {
	GetLoginVerifyCode(context.Context, *GetLoginVerifyCodeRequest, *GetLoginVerifyCodeResponse) error
	GetForgetPasswordCode(context.Context, *GetForgetPasswordCodeRequest, *GetForgetPasswordCodeResponse) error
}

func RegisterSmsServiceHandler(s server.Server, hdlr SmsServiceHandler, opts ...server.HandlerOption) error {
	type smsService interface {
		GetLoginVerifyCode(ctx context.Context, in *GetLoginVerifyCodeRequest, out *GetLoginVerifyCodeResponse) error
		GetForgetPasswordCode(ctx context.Context, in *GetForgetPasswordCodeRequest, out *GetForgetPasswordCodeResponse) error
	}
	type SmsService struct {
		smsService
	}
	h := &smsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SmsService{h}, opts...))
}

type smsServiceHandler struct {
	SmsServiceHandler
}

func (h *smsServiceHandler) GetLoginVerifyCode(ctx context.Context, in *GetLoginVerifyCodeRequest, out *GetLoginVerifyCodeResponse) error {
	return h.SmsServiceHandler.GetLoginVerifyCode(ctx, in, out)
}

func (h *smsServiceHandler) GetForgetPasswordCode(ctx context.Context, in *GetForgetPasswordCodeRequest, out *GetForgetPasswordCodeResponse) error {
	return h.SmsServiceHandler.GetForgetPasswordCode(ctx, in, out)
}

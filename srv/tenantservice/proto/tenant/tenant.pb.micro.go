// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/tenant/tenant.proto

package srv_tenant

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TenantService service

func NewTenantServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TenantService service

type TenantService interface {
	GetTenantInfo(ctx context.Context, in *GetTenantInfoRequest, opts ...client.CallOption) (*GetTenantInfoResponse, error)
	GetTenantPage(ctx context.Context, in *GetTenantPageRequest, opts ...client.CallOption) (*GetTenantPageResponse, error)
	StoreTenant(ctx context.Context, in *StoreTenantRequest, opts ...client.CallOption) (*StoreTenantResponse, error)
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...client.CallOption) (*UpdateTenantResponse, error)
}

type tenantService struct {
	c    client.Client
	name string
}

func NewTenantService(name string, c client.Client) TenantService {
	return &tenantService{
		c:    c,
		name: name,
	}
}

func (c *tenantService) GetTenantInfo(ctx context.Context, in *GetTenantInfoRequest, opts ...client.CallOption) (*GetTenantInfoResponse, error) {
	req := c.c.NewRequest(c.name, "TenantService.GetTenantInfo", in)
	out := new(GetTenantInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantService) GetTenantPage(ctx context.Context, in *GetTenantPageRequest, opts ...client.CallOption) (*GetTenantPageResponse, error) {
	req := c.c.NewRequest(c.name, "TenantService.GetTenantPage", in)
	out := new(GetTenantPageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantService) StoreTenant(ctx context.Context, in *StoreTenantRequest, opts ...client.CallOption) (*StoreTenantResponse, error) {
	req := c.c.NewRequest(c.name, "TenantService.StoreTenant", in)
	out := new(StoreTenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantService) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...client.CallOption) (*UpdateTenantResponse, error) {
	req := c.c.NewRequest(c.name, "TenantService.UpdateTenant", in)
	out := new(UpdateTenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TenantService service

type TenantServiceHandler interface {
	GetTenantInfo(context.Context, *GetTenantInfoRequest, *GetTenantInfoResponse) error
	GetTenantPage(context.Context, *GetTenantPageRequest, *GetTenantPageResponse) error
	StoreTenant(context.Context, *StoreTenantRequest, *StoreTenantResponse) error
	UpdateTenant(context.Context, *UpdateTenantRequest, *UpdateTenantResponse) error
}

func RegisterTenantServiceHandler(s server.Server, hdlr TenantServiceHandler, opts ...server.HandlerOption) error {
	type tenantService interface {
		GetTenantInfo(ctx context.Context, in *GetTenantInfoRequest, out *GetTenantInfoResponse) error
		GetTenantPage(ctx context.Context, in *GetTenantPageRequest, out *GetTenantPageResponse) error
		StoreTenant(ctx context.Context, in *StoreTenantRequest, out *StoreTenantResponse) error
		UpdateTenant(ctx context.Context, in *UpdateTenantRequest, out *UpdateTenantResponse) error
	}
	type TenantService struct {
		tenantService
	}
	h := &tenantServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TenantService{h}, opts...))
}

type tenantServiceHandler struct {
	TenantServiceHandler
}

func (h *tenantServiceHandler) GetTenantInfo(ctx context.Context, in *GetTenantInfoRequest, out *GetTenantInfoResponse) error {
	return h.TenantServiceHandler.GetTenantInfo(ctx, in, out)
}

func (h *tenantServiceHandler) GetTenantPage(ctx context.Context, in *GetTenantPageRequest, out *GetTenantPageResponse) error {
	return h.TenantServiceHandler.GetTenantPage(ctx, in, out)
}

func (h *tenantServiceHandler) StoreTenant(ctx context.Context, in *StoreTenantRequest, out *StoreTenantResponse) error {
	return h.TenantServiceHandler.StoreTenant(ctx, in, out)
}

func (h *tenantServiceHandler) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, out *UpdateTenantResponse) error {
	return h.TenantServiceHandler.UpdateTenant(ctx, in, out)
}

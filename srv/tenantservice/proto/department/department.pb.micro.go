// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/department/department.proto

package srv_tenant

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DepartmentService service

func NewDepartmentServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DepartmentService service

type DepartmentService interface {
	GetDepartmentTree(ctx context.Context, in *GetDepartmentTreeRequest, opts ...client.CallOption) (*GetDepartmentTreeResponse, error)
	GetDepartmentInfo(ctx context.Context, in *GetDepartmentInfoRequest, opts ...client.CallOption) (*GetDepartmentInfoResponse, error)
	StoreDepartment(ctx context.Context, in *StoreDepartmentRequest, opts ...client.CallOption) (*StoreDepartmentResponse, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...client.CallOption) (*UpdateDepartmentResponse, error)
	BatchBanDepartment(ctx context.Context, in *BatchBanDepartmentRequest, opts ...client.CallOption) (*BatchBanDepartmentResponse, error)
}

type departmentService struct {
	c    client.Client
	name string
}

func NewDepartmentService(name string, c client.Client) DepartmentService {
	return &departmentService{
		c:    c,
		name: name,
	}
}

func (c *departmentService) GetDepartmentTree(ctx context.Context, in *GetDepartmentTreeRequest, opts ...client.CallOption) (*GetDepartmentTreeResponse, error) {
	req := c.c.NewRequest(c.name, "DepartmentService.GetDepartmentTree", in)
	out := new(GetDepartmentTreeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) GetDepartmentInfo(ctx context.Context, in *GetDepartmentInfoRequest, opts ...client.CallOption) (*GetDepartmentInfoResponse, error) {
	req := c.c.NewRequest(c.name, "DepartmentService.GetDepartmentInfo", in)
	out := new(GetDepartmentInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) StoreDepartment(ctx context.Context, in *StoreDepartmentRequest, opts ...client.CallOption) (*StoreDepartmentResponse, error) {
	req := c.c.NewRequest(c.name, "DepartmentService.StoreDepartment", in)
	out := new(StoreDepartmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...client.CallOption) (*UpdateDepartmentResponse, error) {
	req := c.c.NewRequest(c.name, "DepartmentService.UpdateDepartment", in)
	out := new(UpdateDepartmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) BatchBanDepartment(ctx context.Context, in *BatchBanDepartmentRequest, opts ...client.CallOption) (*BatchBanDepartmentResponse, error) {
	req := c.c.NewRequest(c.name, "DepartmentService.BatchBanDepartment", in)
	out := new(BatchBanDepartmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DepartmentService service

type DepartmentServiceHandler interface {
	GetDepartmentTree(context.Context, *GetDepartmentTreeRequest, *GetDepartmentTreeResponse) error
	GetDepartmentInfo(context.Context, *GetDepartmentInfoRequest, *GetDepartmentInfoResponse) error
	StoreDepartment(context.Context, *StoreDepartmentRequest, *StoreDepartmentResponse) error
	UpdateDepartment(context.Context, *UpdateDepartmentRequest, *UpdateDepartmentResponse) error
	BatchBanDepartment(context.Context, *BatchBanDepartmentRequest, *BatchBanDepartmentResponse) error
}

func RegisterDepartmentServiceHandler(s server.Server, hdlr DepartmentServiceHandler, opts ...server.HandlerOption) error {
	type departmentService interface {
		GetDepartmentTree(ctx context.Context, in *GetDepartmentTreeRequest, out *GetDepartmentTreeResponse) error
		GetDepartmentInfo(ctx context.Context, in *GetDepartmentInfoRequest, out *GetDepartmentInfoResponse) error
		StoreDepartment(ctx context.Context, in *StoreDepartmentRequest, out *StoreDepartmentResponse) error
		UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, out *UpdateDepartmentResponse) error
		BatchBanDepartment(ctx context.Context, in *BatchBanDepartmentRequest, out *BatchBanDepartmentResponse) error
	}
	type DepartmentService struct {
		departmentService
	}
	h := &departmentServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DepartmentService{h}, opts...))
}

type departmentServiceHandler struct {
	DepartmentServiceHandler
}

func (h *departmentServiceHandler) GetDepartmentTree(ctx context.Context, in *GetDepartmentTreeRequest, out *GetDepartmentTreeResponse) error {
	return h.DepartmentServiceHandler.GetDepartmentTree(ctx, in, out)
}

func (h *departmentServiceHandler) GetDepartmentInfo(ctx context.Context, in *GetDepartmentInfoRequest, out *GetDepartmentInfoResponse) error {
	return h.DepartmentServiceHandler.GetDepartmentInfo(ctx, in, out)
}

func (h *departmentServiceHandler) StoreDepartment(ctx context.Context, in *StoreDepartmentRequest, out *StoreDepartmentResponse) error {
	return h.DepartmentServiceHandler.StoreDepartment(ctx, in, out)
}

func (h *departmentServiceHandler) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, out *UpdateDepartmentResponse) error {
	return h.DepartmentServiceHandler.UpdateDepartment(ctx, in, out)
}

func (h *departmentServiceHandler) BatchBanDepartment(ctx context.Context, in *BatchBanDepartmentRequest, out *BatchBanDepartmentResponse) error {
	return h.DepartmentServiceHandler.BatchBanDepartment(ctx, in, out)
}
